---
- name: find current deployment, if any
  k8s_facts:
    api_version: "{{ kube_resource_deployments_api }}"
    kind: Deployment
    name: "{{ kube_resource_name }}"
    namespace: "{{ kube_resource_namespace }}"
  register: kube_resource_current_deployment

- name: set kube_resource_current_revision
  set_fact:
    kube_resource_current_revision: >-
      {{ kube_resource_current_deployment.resources[0].metadata.annotations['deployment.kubernetes.io/revision'] }}

- name: find all replicasets
  k8s_facts:
    api_version: "{{ kube_resource_deployments_api }}"
    kind: ReplicaSet
    namespace: "{{ kube_resource_namespace }}"
  register: kube_resource_replicasets

- name: find current replicaset
  set_fact:
    kube_resource_current_replicaset: >-
      {{ kube_resource_replicasets.resources |
         json_query('[?contains(metadata.ownerReferences[].name, `' + kube_resource_name +'`)]') |
         json_query('[?metadata.annotations."deployment.kubernetes.io/revision" == `"' +
                      kube_resource_current_revision + '"`]') |
         first }}

- name: patch configmaps with owners
  k8s:
    kind: ConfigMap
    namespace: "{{ item.value.metadata.namespace }}"
    name: "{{ item.value | k8s_config_resource_name }}"
    definition:
      metadata:
        ownerReferences:
          - apiVersion: "{{ kube_resource_deployments_api }}"
            kind: ReplicaSet
            name: "{{ kube_resource_current_replicaset.metadata.name }}"
            uid: "{{ kube_resource_current_replicaset.metadata.uid }}"
  loop: "{{ kube_resource_configmaps | dict2items }}"

- name: patch secrets with owners
  k8s:
    kind: Secret
    namespace: "{{ item.value.metadata.namespace }}"
    name: "{{ item.value | k8s_config_resource_name }}"
    definition:
      metadata:
        ownerReference:
          - apiVersion: "{{ kube_resource_deployments_api }}"
            kind: ReplicaSet
            name: "{{ kube_resource_current_replicaset.metadata.name }}"
            uid: "{{ kube_resource_current_replicaset.metadata.uid }}"
  loop: "{{ kube_resource_secrets | dict2items }}"
  loop_control:
    label: "{{ item.value.kind }}-{{ item.value.metadata.name }}"
  no_log: "{{ not kube_resource_UNSAFE_show_logs }}"

- block:
    - name: set kube_resource_previous_revision
      set_fact:
        kube_resource_previous_revision: >-
          {{ kube_resource_previous_deployment.resources[0].metadata.annotations['deployment.kubernetes.io/revision'] }}

    - name: find previous replicaset
      set_fact:
        kube_resource_previous_replicaset: >-
          {{ kube_resource_replicasets.resources |
             json_query('[?contains(metadata.ownerReferences[].name, `' + kube_resource_name +'`)]') |
             json_query('[?metadata.annotations."deployment.kubernetes.io/revision" == `"' +
                          kube_resource_previous_revision + '"`]') |
             first }}
  when:
    - kube_resource_previous_deployment.resources
    - ansible_verbosity >= 3

- block:
    - name: set diff_lists to empty
      set_fact:
        kube_resource_configmap_diff_list: []
        kube_resource_secret_diff_list: []

    - name: for each ConfigMap prefix, look up all ConfigMaps
      k8s_facts:
        kind: ConfigMap
        namespace: "{{ item.value.metadata.namespace }}"
        label_selectors:
          - config_map_prefix = {{ item.value.metadata.name }}
      register: kube_resource_prefix_configmaps
      loop: "{{ kube_resource_configmaps | dict2items }}"

    - name: generate diff list
      set_fact:
        kube_resource_configmap_diff_list: >-
          {{ kube_resource_configmap_diff_list + [{
               'before': item.resources |
                         json_query('[?metadata.ownerReferences[-1].name == `' +
                         kube_resource_previous_replicaset.metadata.name + '`]'),
               'after': item.resources |
                        json_query('[?metadata.ownerReferences[-1].name == `' +
                        kube_resource_current_replicaset.metadata.name +'`]') }]
          }}
      loop: "{{ kube_resource_prefix_configmaps.results }}"

    - name: for each Secret prefix, look up all Secrets
      k8s_facts:
        kind: Secret
        namespace: "{{ item.value.metadata.namespace }}"
        label_selectors:
          - "{{ kube_resource_prefix_label }} = {{ item.value.metadata.name }}"
      register: kube_resource_prefix_secrets
      loop: "{{ kube_resource_secrets | dict2items }}"
      loop_control:
        label: "{{ item.value.kind }}-{{ item.value.metadata.name }}"
      when: kube_resource_UNSAFE_show_logs | bool


    - name: generate diff list
      set_fact:
        kube_resource_secret_diff_list: >-
          {{ kube_resource_secret_diff_list + [{
               'before': item.resources |
                         json_query('[?metadata.ownerReferences[-1].name == `' +
                         kube_resource_previous_replicaset.metadata.name + '`]'),
               'after': item.resources |
                        json_query('[?metadata.ownerReferences[-1].name == `' +
                        kube_resource_current_replicaset.metadata.name +'`]') }]
          }}
      loop: "{{ kube_resource_prefix_secrets.results }}"
      loop_control:
        label: "Secret-{{ item.item.value.metadata.name }}"
      when:
        - kube_resource_UNSAFE_show_logs | bool
        - kube_resource_prefix_secrets is not skipped

    - name: show diffs of ConfigMaps
      debug:
        msg: "{{ item.before | first | recursive_diff(item.after | first) | to_nice_yaml }}"
      loop: "{{ kube_resource_configmap_diff_list }}"
      when: item.before and item.after

    - name: show diffs of Secrets
      debug:
        msg: "{{ item.before | first | recursive_diff(item.after | first) | to_nice_yaml }}"
      loop: "{{ kube_resource_secret_diff_list }}"
      loop_control:
        label: "Secret-{{ item.after.metadata.name }}"
      when:
        - item.before
        - item.after
        - kube_resource_UNSAFE_show_logs | bool

  when:
    - >-
        not kube_resource_previous_deployment.resources or
        kube_resource_current_revision|default() != kube_resource_previous_revision|default()
    - ansible_verbosity >= 3
    - kube_resource_previous_replicaset is defined and kube_resource_current_replicaset is defined
