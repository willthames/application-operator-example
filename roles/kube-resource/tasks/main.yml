---
- name: ensure that the namespace exists
  k8s:
    kind: Namespace
    name: "{{ kube_resource_namespace }}"
  when: kube_resource_create_namespace

- name: empty manifest and secret lists (important if role is run twice!)
  set_fact:
    kube_resource_manifests_from_files: []
    kube_resource_secrets_from_files: []

- name: create secrets list
  set_fact:
    kube_resource_secrets_from_files: >
      {{ kube_resource_secrets_from_files + lookup('template', item)|from_yaml_all|list }}
  loop: "{{ kube_resource_secrets_files }}"
  no_log: "{{ not kube_resource_UNSAFE_show_logs }}"

- name: create manifests list
  set_fact:
    kube_resource_manifests_from_files: >
      {{ kube_resource_manifests_from_files + lookup('template', item)|from_yaml_all|list }}
  loop: "{{ kube_resource_manifest_files }}"

- name: create configmaps
  k8s:
    definition: "{{ item.value }}"
    append_hash: true
    validate: "{{ kube_resource_validate_options }}"
    wait: "{{ kube_resource_wait }}"
    wait_timeout: "{{ kube_resource_wait_timeout }}"
  loop: "{{ kube_resource_configmaps | dict2items }}"

- name: create secrets
  k8s:
    definition: "{{ item.value }}"
    append_hash: true
    validate: "{{ kube_resource_validate_options }}"
    wait: "{{ kube_resource_wait }}"
    wait_timeout: "{{ kube_resource_wait_timeout }}"
  loop: "{{ kube_resource_secrets | dict2items }}"
  loop_control:
    label: "{{ item.value.kind }}-{{ item.value.metadata.name }}"
  no_log: "{{ not kube_resource_UNSAFE_show_logs }}"

- name: create secrets from files
  k8s:
    definition: "{{ item }}"
    validate: "{{ kube_resource_validate_options }}"
    wait: "{{ kube_resource_wait }}"
    wait_timeout: "{{ kube_resource_wait_timeout }}"
  loop: "{{ kube_resource_secrets_from_files }}"
  loop_control:
    label: "{{ item.kind }}-{{ item.metadata.name }}"
  no_log: "{{ not kube_resource_UNSAFE_show_logs }}"

- name: find existing deployment, if any
  k8s_facts:
    api_version: "{{ kube_resource_deployments_api }}"
    kind: Deployment
    name: "{{ kube_resource_name }}"
    namespace: "{{ kube_resource_namespace }}"
  register: kube_resource_previous_deployment

- name: apply all resource definitions in order
  include_tasks: resource.yml
  loop: "{{ kube_resource_manifests_from_files }}"

- include_tasks: set_owner.yml
  when: kube_resource_set_owner
